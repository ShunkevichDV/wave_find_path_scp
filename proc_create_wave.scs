proc_create_wave
=> nrel_main_idtf:
	[Создаёт новую волну] (* <- lang_ru;; *);
	[Create new wave] (* <- lang_en;; *);
<- scp_program;
-> rrel_key_sc_element: _process1;;

proc_create_wave = [*
_process1 
_<- scp_process;

_-> rrel_1:: rrel_in:: _graph;
_-> rrel_2:: rrel_in:: _wave;
_-> rrel_3:: rrel_in:: _not_checked_vertexes;
_-> rrel_4:: rrel_out:: _new_wave;

_<= nrel_decomposition_of_action:: _... (*

	_-> rrel_1:: _..proc_create_wave_operator1 
	(*
		_<- genEl;;
		_-> rrel_1:: rrel_assign:: rrel_const:: rrel_node:: rrel_scp_var:: _new_wave;;

		_=> nrel_goto:: _..proc_create_wave_operator2;;
	*);;

// Формируем копию волны wave для перебора
	_-> _..proc_create_wave_operator2 (*
		_<- searchSetStr3;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_const:: _wave;;
		_-> rrel_2:: rrel_assign:: rrel_pos:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_assign:: rrel_scp_var:: _el3;;
	
		_->rrel_set_3:: rrel_assign:: rrel_scp_var:: _wave_copy;;

		_=> nrel_then:: _..proc_create_wave_operator3;;		
		_=> nrel_else:: _..proc_create_wave_operator_erase_wave_copy;;	
	*);;	
//	Цикл по вершинам в волне wave.
	_-> _..proc_create_wave_operator3 (*
		_<- searchElStr3;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _wave_copy;;
		_-> rrel_2:: rrel_assign:: rrel_pos:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_assign:: rrel_scp_var:: _vertex;;

		_=> nrel_then:: _..proc_create_wave_operator4;;
		_=> nrel_else:: _..proc_create_wave_operator_erase_wave_copy;; 
	*);;
	
	_-> _..proc_create_wave_operator4 (*
		_<- eraseEl;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: rrel_erase:: _arc2;;

		_=> nrel_goto:: _..proc_create_wave_operator5;;
	*);;
//	Формируем множество ребер графа для итерации
	_-> _..proc_create_wave_operator5 (*
		_<- searchSetStr5;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_const:: _graph;;
		_-> rrel_2:: rrel_assign:: rrel_pos:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_assign:: rrel_scp_var:: _el3;;
		_-> rrel_4:: rrel_assign:: rrel_pos:: rrel_scp_var:: _arc4;;
		_-> rrel_5:: rrel_fixed:: rrel_scp_const:: rrel_edge;;
	
		_->rrel_set_3:: rrel_assign:: rrel_scp_var:: _edges_set;;
		_=> nrel_then:: _..proc_create_wave_operator6;;		
		_=> nrel_else:: _..proc_create_wave_operator_erase_wave_copy;;
	*);;		
//	Цикл по ребрам графа.
	_-> _..proc_create_wave_operator6 (*
		_<- searchElStr3;;

		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _edges_set;;
		_-> rrel_2:: rrel_assign:: rrel_pos:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_assign:: rrel_scp_var:: _edge;;

		_=> nrel_then:: _..proc_create_wave_operator7;;
		_=> nrel_else:: _..proc_create_wave_operator_erase_edges_set ;;
	*);;

	_-> _..proc_create_wave_operator7 (*
		_<- eraseEl;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: rrel_erase:: _arc2;;

		_=> nrel_goto:: _..proc_create_wave_operator8;;
	*);;
//	Поиск вершины инцидентной ребру edge и отличной от вершины vertex
	_-> _..proc_create_wave_operator8 (*
		_<- call;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_const:: proc_get_other_vertex_incidence_edge;;
		_-> rrel_2:: rrel_fixed:: rrel_scp_const:: _..params (*
			_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _edge;;
			_-> rrel_2:: rrel_fixed:: rrel_scp_var:: _vertex;;
			_-> rrel_3:: rrel_assign:: rrel_scp_var:: _other_vertex;;
		*);;
		_-> rrel_3:: rrel_assign:: rrel_scp_var:: _descr;;

		_=> nrel_goto:: _..proc_create_wave_operator9;;
	*);;

	_-> _..proc_create_wave_operator9 (*
		_<- waitReturn;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _descr;;

		_=> nrel_goto:: _..proc_create_wave_operator10;;
	*);;

	_-> _..proc_create_wave_operator10 (*
		_<- ifVarAssign;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _other_vertex;;

		_=> nrel_then:: _..proc_create_wave_operator11;;
		_=> nrel_else:: _..proc_create_wave_operator6;;
	*);;

	_-> _..proc_create_wave_operator11 (*
		_<- searchElStr3;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_const:: _not_checked_vertexes;;
		_-> rrel_2:: rrel_assign:: rrel_pos_const_perm:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_fixed:: rrel_scp_var:: _other_vertex;;

		_=> nrel_then:: _..proc_create_wave_operator12;;
		_=> nrel_else:: _..proc_create_wave_operator6;; 
	*);;

	_-> _..proc_create_wave_operator12 (*
		_<- eraseEl;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: rrel_erase:: _arc2;;

		_=> nrel_goto:: _..proc_create_wave_operator13;;
	*);;

	_-> _..proc_create_wave_operator13 (*
		_<- genElStr3;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: _new_wave;;
		_-> rrel_2:: rrel_assign:: rrel_pos_const_perm:: rrel_scp_var:: _arc2;;
		_-> rrel_3:: rrel_fixed:: rrel_scp_var:: _other_vertex;;

		_=> nrel_goto:: _..proc_create_wave_operator6;;
	*);;
//  После каждого цикла итерации по ребрам будем выполнять очистку памяти
	_-> _..proc_create_wave_operator_erase_edges_set (*
		_<- eraseEl;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: rrel_erase:: _edges_set;;

		_=> nrel_goto:: _..proc_create_wave_operator3;;
	*);;
// Удаляем копию волны.
	_-> _..proc_create_wave_operator_erase_wave_copy (*
		_<- eraseEl;;
		_-> rrel_1:: rrel_fixed:: rrel_scp_var:: rrel_erase:: _wave_copy;;

		_=> nrel_goto:: _..proc_create_wave_operator_return;;
	*);;

	_-> _..proc_create_wave_operator_return (*
		_<- return;;
	*);;

*);;
*];;